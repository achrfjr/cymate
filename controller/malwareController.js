
import { PythonService } from "../services/PythonService.js"
import fs from "fs/promises"; // Use fs.promises for async/await

const malwareFileController = async (req, res) => { 
    try {
        // Check if a file was uploaded
        if (!req.file) {
            return res.status(400).json({ error: "No file uploaded" })
        }

        console.log("File received:", req.file.originalname)
        
        const pythonService = new PythonService();
        const toolOutput = await pythonService.executeScript('File Scanner', [req.file.path])

        // Delete the file after processing
        await fs.unlink(req.file.path) // Use req.file.path instead of undefined 'filePath'

        // Respond with the result
        return res.status(200).json({ 
            message: "File processed successfully", 
            result: JSON.parse(toolOutput) 
        })
    } catch (error) {
        console.error("Error processing file:", error)
        return res.status(500).json({ error: error.message })
    }
}

// Controller for handling URL-based malware scanning
// This controller processes a URL provided in the request body
// It is expected to perform some analysis or scanning on the URL
const malwareUrlController = async (req, res) => {
    try {
        // Extract the URL from the request body
        const { url } = req.body

        // Check if a URL was provided
        if (!url) {
            return res.status(400).json({ error: "No URL provided" })
        }

        // Process the URL (this is a placeholder for actual processing logic)
        // For example, you might want to scan the URL for malware or analyze its content
        console.log("URL received:", url)
        const pythonService = new PythonService()
        const toolOutput = await pythonService.executeScript('URL Scanner', [url])

        // Respond with the result of the processing
        return res.status(200).json({ message: "URL processed successfully", result: JSON.parse(toolOutput) })
    } catch (error) {
        console.error("Error processing URL:", error)
        return res.status(500).json({ error: error.message })
    }
}

// Export the controllers to be used in routes
export { malwareFileController, malwareUrlController }